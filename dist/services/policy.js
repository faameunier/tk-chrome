class PolicyManager{constructor(){}static async run(){let a=this.buildWindows();this.backfillRuns(a),this.cleanRuntimeWindows(a);let b=_.pick(memoryManager.current_scores,Object.keys(memoryManager.tabs)),c=Object.keys(a),d=_.map(c,b=>this.runWindow(a,b)),e=await Promise.all(d),f=Date.now(),g=!1;for(var h=0;h<c.length;h++)e[h][0]&&(memoryManager.runtime_events.last_policy_runs[c[h]]=f,b=Object.assign(b,e[h][1]),g=!0);memoryManager.current_scores=b,g&&(await memoryManager.save())}static buildWindows(){return _.groupBy(memoryManager.tabs,a=>a.windowId)}static backfillRuns(a){let b=Date.now(),c=Object.keys(memoryManager.runtime_events.last_policy_runs),d=Object.keys(a),e=_.difference(d,c);for(var f=0;f<e.length;f++)memoryManager.runtime_events.last_policy_runs[e[f]]=b}static cleanRuntimeWindows(a){let b=Object.keys(memoryManager.runtime_events.last_policy_runs),c=Object.keys(a),d=_.difference(b,c);for(var e=0;e<d.length;e++)delete memoryManager.runtime_events.last_policy_runs[d[e]]}static async runWindow(a,b){let c=a[b];if(c.length>settingsManager.settings.policy.target_tabs&&this.exponentialTrigger(c,b)){if(c=_.filter(c,a=>a.active==settingsManager.settings.policy.active&&a.pinned==settingsManager.settings.policy.pinned&&a.audible==settingsManager.settings.policy.audible),0===c.length)return[!1,{}];let a=await Promise.all(_.map(c,a=>Scorer.score(a))),e=_.zipObject(_.map(c,a=>a.tabId),a);a=_.zip(_.map(c,a=>a.tabId),a),a.sort((a,b)=>a[1]>b[1]?1:-1),logger(b.toString().concat(" window scored: ",JSON.stringify(a)));let f=a.shift();if(f[1]===MAXIMUM_SCORE)return[!1,{}];f=f[0];for(var d=0;0<a.length;){let b=a.pop()[1];b===MAXIMUM_SCORE&&(d+=1)}if(d<c.length-settingsManager.settings.policy.target_tabs)return await this.killTab(f,_.find(c,a=>a.tabId===f)),[!0,e]}return[!1,{}]}static async killTab(a,b){try{let c=new Promise((b,c)=>{chrome.tabs.remove(parseInt(a),function(){let a=chrome.runtime.lastError;a?c("Tab not found"):b()})});await c;let d=copy(b);d.deletion_time=Date.now(),memoryManager.closed_history.push(d),memoryManager.closed_history=memoryManager.closed_history.slice(0,MAXIMUM_HISTORY_SIZE),logger("Tab ".concat(a," killed by policy"))}catch(b){logger("Tab ".concat(a," not found"))}}static exponentialTrigger(a,b){let c=a.length,d=memoryManager.runtime_events.last_policy_runs[b];return Date.now()-memoryManager.runtime_events.last_policy_runs[b]>=settingsManager.settings.policy.min_time*Math.pow(settingsManager.settings.policy.decay,Math.max(0,c-settingsManager.settings.policy.target_tabs))}}