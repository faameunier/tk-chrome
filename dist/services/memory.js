function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}class MemoryManager{constructor(){return _defineProperty(this,"empty_win",{total_tabs:0,active_tab:null,tabs:{}}),_defineProperty(this,"empty_stats",{total_active_time:0,total_inactive_time:0,total_cached_time:0,last_active_timestamp:null,activated:0,updated_at:null}),_defineProperty(this,"empty_tab",{url:null,statistics:{},pinned:!1,active:!1,audible:!1,favIconUrl:null,title:null,cache:[]}),MemoryManager.instance||(logger(this,"Instanciating empty MemoryManager"),MemoryManager.instance=this,this.wins={},this.tabs2wins={},this.closed_history=[],this.last_full_stats_update=Date.now(),this.settings={memory:{cache_size:5,min_time_full_stats_update:300000},closer:{target_tabs:10,score_threshold:50,decay:.8},scorer:{min_active:10}}),MemoryManager.instance}async reset(){this.wins={},this.tabs2wins={},this.closed_history=[],this.last_full_stats_update=Date.now(),await this.save(),await this.load()}async save(){await storageSet({wins:JSON.stringify(this.wins),tabs2wins:this.tabs2wins,closed_history:this.closed_history,last_full_stats_update:this.last_full_stats_update})}async load(){await storageGet(["wins","tabs2wins","closed_history","last_full_stats_update"]).then(a=>{try{logger(this,"Loading state from storage"),this.tabs2wins=a.tabs2wins,this.closed_history=a.closed_history,this.last_full_stats_update=a.last_full_stats_update,this.wins=JSON.parse(a.wins);for(let a of Object.keys(this.wins)){let b=this.wins[a].tabs;for(let a of Object.keys(b)){let c=b[a];c.cache=LRUfactory.fromJSON(c.cache)}}}catch(a){logger(this,"Loading fail, init memory")}})}async log(){"dev"===ENV&&(await this.updateAllStatistics(),console.log(this.wins))}async createWindow(a){this.wins[a]||(this.wins[a]=copy(this.empty_win),logger(this,"Window "+a+" added to memory"))}async setActivated(a,b){if(!this.tabs2wins[a])logger(this,"Hu ho, unknown activated tab, ignored");else{if(this.tabs2wins[a]!==b){logger(this,"Hu ho, Tab is in wrong window");let c=this.tabs2wins[a];// In case we are out of sync
await this.createWindow(b),await this.changeWindow(a,b),this.wins[c]&&(this.wins[c].active_tab=null)}let c=this.wins[b];"undefined"==typeof c&&(logger(this,"WARNING seriously out of sync"),await this.createWindow(b),await this.changeWindow(a,b));let d=c.active_tab;null===c.tabs[d]||"undefined"==typeof c.tabs[d]?(logger(this,"WARNING we are seriously out of sync, trying to repair"),await this.deleteTab(d,b)):null!==d&&(await this.updateStatistics(c.tabs[d],!1,!1),c.tabs[d].active=!1),await this.updateStatistics(c.tabs[a],!1,!0),c.active_tab=a,c.tabs[a].active=!0}}async createTab(a){// window should exist !
if("undefined"!=typeof a.id){let b=copy(this.empty_tab);b.cache=new LRU(this.settings.memory.cache_size),b.pinned=a.pinned,"undefined"!=typeof a.url&&(b.url=getDomain(a.url)),"undefined"!=typeof a.pinned&&(b.pinned=a.pinned),"undefined"!=typeof a.audible&&(b.audible=a.audible),"undefined"!=typeof a.favIconUrl&&(b.favIconUrl=a.favIconUrl),"undefined"!=typeof a.title&&(b.title=a.title),await this.createStatistics(b),this.tabs2wins[a.id]=a.windowId,this.wins[a.windowId].tabs[a.id]=b,this.wins[a.windowId].total_tabs+=1,a.active&&(await this.setActivated(a.id,a.windowId)),logger(this,"Tab "+a.id+" added to memory")}}async changeWindow(a,b){if(logger(this,"Tab assigned to new window"),!this.tabs2wins[a])logger(this,"Missing tab found"),await this.createTab({id:a,windowId:b});else{let d=this.tabs2wins[a];if(!this.wins[d].tabs[a]&&(logger(this,"WARNING please guys have some respect"),await this.createTab({id:a,windowId:d}),d===b))return null;// easy workaround
// else the empty tab will be deleted in 2secs
var c=this.wins[d].tabs[a].cache;this.wins[d].tabs[a].cache=null,this.wins[b].tabs[a]=copy(this.wins[d].tabs[a]),this.wins[b].tabs[a].cache=c,await this.deleteTab(a,d,!1),this.tabs2wins[a]=b,this.wins[b]&&(this.wins[b].total_tabs+=1)}}async updateTab(a,b,c){logger(this,"Updating tab "+a),this.tabs2wins[a]||(logger(this,"Missing tab found"),await this.createWindow(c.windowId),await this.createTab(c)),this.tabs2wins[a]!==c.windowId&&(logger(this,"Hu ho, Tab is in wrong window"),await this.createWindow(c.windowId),await this.changeWindow(a,c.windowId));let d=this.wins[c.windowId].tabs[a];if(d||(logger(this,"WARNING come on what are you doing guys"),await this.createWindow(c.windowId),await this.changeWindow(a,c.windowId)),"undefined"!=typeof b.url){let a=getDomain(b.url),c=d.url;if(d.url=a,a!==c){await this.updateStatistics(d,!1,!1);let b=d.statistics,e=d.cache.read(a);e?(d.statistics=e,await this.updateStatistics(d,!0,!1),logger(this,"Old state restored from cache")):(await this.createStatistics(d),logger(this,"State couldn't be restored")),d.cache.write(c,b)}}"undefined"!=typeof b.pinned&&(d.pinned=b.pinned),"undefined"!=typeof b.audible&&(d.audible=b.audible),"undefined"!=typeof b.favIconUrl&&(d.favIconUrl=b.favIconUrl),"undefined"!=typeof b.title&&(d.title=b.title)}async deleteTab(a,b){logger(this,"Deleting tab "+a);try{delete this.tabs2wins[a]}catch(a){logger(this,"Hu ho, what was that tab...")}try{this.wins[b].tabs[a]&&(delete this.wins[b].tabs[a],this.wins[b].total_tabs-=1,0>this.wins[b].total_tabs&&(logger(this,"Missing at least one tab in window "+b),this.wins[b].total_tabs=0),0===this.wins[b].total_tabs&&(logger(this,"Window "+b+" is empty, deleting"),delete this.wins[b]))}catch(a){if(a instanceof TypeError)logger(this,"Hu ho, missing window in memory...");else throw a}}async createStatistics(a){let b=copy(this.empty_stats),c=Date.now();a.active&&(b.last_active_timestamp=c,b.activated=1),b.updated_at=c,a.statistics=b}async updateStatistics(a,b=!1,c=!1){let d=Date.now();b?(c=!0,a.statistics.total_cached_time+=d-a.statistics.updated_at,a.statistics.updated_at=d,a.statistics.activated+=1):(a.active?(a.statistics.total_active_time+=d-a.statistics.updated_at,a.statistics.last_active_timestamp=d):((c||0===a.statistics.activated)&&(a.statistics.activated+=1),a.statistics.total_inactive_time+=d-a.statistics.updated_at),a.statistics.updated_at=d)}async updateAllStatistics(){let a=Date.now();if(a-this.last_full_stats_update>=this.settings.memory.min_time_full_stats_update){logger(this,"Running full stats");for(var b=Object.keys(this.tabs2wins),c=0;c<b.length;c++)try{let a=this.wins[this.tabs2wins[b[c]]];await this.updateStatistics(a.tabs[b[c]])}catch(a){logger(this,"WARNING tracking seriously out of sync"),await this.deleteTab(b[c])}this.last_full_stats_update=a}}}var memoryManager=new MemoryManager;